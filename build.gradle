buildscript {
	ext {
		kotlinVersion = '1.2.71'
		springBootVersion = '2.1.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'com.google.protobuf'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "application"

compileKotlin.dependsOn ':generateProto'

group = ' com.lykke'
version = '0.0.1'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

ext {
    protobuf_version = '3.6.0'
	springfox_swagger2 = "2.9.2"
	springfox_swagger_ui = "2.9.2"
	reflections_version = "0.9.11"
	log4j_version = "1.2.17"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation "org.jetbrains.kotlin:kotlin-reflect"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	compile "com.google.protobuf:protobuf-java:$protobuf_version"

	compile "io.springfox:springfox-swagger2:$springfox_swagger2"
	compile "io.springfox:springfox-swagger-ui:$springfox_swagger_ui"

	compile "org.reflections:reflections:$reflections_version"
	compile "log4j:log4j:$log4j_version"
    compile 'org.bitbucket.lykke:kotlin-utils:0.0.7-SNAPSHOT'
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

bootDistZip {
	archiveName "${project.name}-${project.version}.zip"
	into("${project.name}-${project.version}.zip") {
		from "${rootProject.projectDir}/src/dist"
	}
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }

    generateProtoTasks.generatedFilesBaseDir = 'src'

    generateProtoTasks {
        ofSourceSet('main')
    }
}

mainClassName = "com.lykke.me.test.client.ApplicationKt"
distTar.enabled = false
